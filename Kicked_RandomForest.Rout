
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Use suppressPackageStartupMessages() to eliminate package startup messages
> library(embed)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(vcd)
Loading required package: grid
> library(discrim)

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> 
> 
> # Read in the data
> training <-vroom("./training.csv", na=c("","NULL","NA")) %>%
+   mutate(IsBadBuy = factor(IsBadBuy))
Rows: 72983 Columns: 34
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (15): PurchDate, Auction, Make, Model, Trim, SubModel, Color, Transmissi...
dbl (19): RefId, IsBadBuy, VehYear, VehicleAge, WheelTypeID, VehOdo, MMRAcqu...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom("./test.csv", na=c("","NULL","NA"))
Rows: 48707 Columns: 33
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (15): PurchDate, Auction, Make, Model, Trim, SubModel, Color, Transmissi...
dbl (18): RefId, VehYear, VehicleAge, WheelTypeID, VehOdo, MMRAcquisitionAuc...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # Recipe
> my_recipe <- recipe(IsBadBuy ~ ., data = training) %>%
+   step_novel(all_nominal_predictors(), -all_outcomes()) %>%
+   step_unknown(all_nominal_predictors()) %>% 
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(IsBadBuy)) %>%
+   step_impute_mean(all_numeric_predictors()) %>%
+   step_corr(all_numeric_predictors(), threshold = .7) %>%
+   step_zv() %>%
+   step_normalize(all_numeric_predictors())
> 
> prep <- prep(my_recipe)
boundary (singular) fit: see help('isSingular')
> bake(prep, new_data=training)
# A tibble: 72,983 × 23
   RefId PurchDate Auction VehicleAge   Model    Trim SubModel  Color
   <dbl>     <dbl>   <dbl>      <dbl>   <dbl>   <dbl>    <dbl>  <dbl>
 1 -1.73     0.995   -2.00     -0.687  0.529   0.126    0.0892 -1.19 
 2 -1.73     0.995   -2.00      0.481 -0.0603  0.0990  -0.159  -0.231
 3 -1.73     0.995   -2.00     -0.103  0.319   0.811    3.37   -0.518
 4 -1.73     0.995   -2.00      0.481 -1.79    0.811   -0.142  -0.182
 5 -1.73     0.995   -2.00     -0.103 -1.01   -1.08    -0.874  -0.182
 6 -1.73     0.995   -2.00      0.481  1.06   -0.434   -0.413  -0.231
 7 -1.73     0.995   -2.00      0.481  0.531  -0.0962   0.576   1.36 
 8 -1.73     0.995   -2.00     -0.103 -0.630  -0.104   -0.390  -0.231
 9 -1.73     0.995   -2.00     -1.27   0.531  -0.0962   0.576   1.36 
10 -1.73     0.995   -2.00     -1.27   0.692   0.913    1.03   -1.19 
# ℹ 72,973 more rows
# ℹ 15 more variables: Transmission <dbl>, WheelTypeID <dbl>, WheelType <dbl>,
#   VehOdo <dbl>, Nationality <dbl>, Size <dbl>, TopThreeAmericanName <dbl>,
#   AUCGUART <dbl>, BYRNO <dbl>, VNZIP1 <dbl>, VNST <dbl>, VehBCost <dbl>,
#   IsOnlineSale <dbl>, WarrantyCost <dbl>, IsBadBuy <fct>
> 
> # Random Forest -----------------------------------------------------------
> 
> # model for random forest
> forest_mod <- rand_forest(mtry = tune(),
+                           min_n = tune(),
+                           trees = 100) %>%
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> # Create a workflow with model & recipe
> wf <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(forest_mod) %>%
+   fit(data = training)
boundary (singular) fit: see help('isSingular')
Warning messages:
1: tune columns were requested but there were 22 predictors in the data. 22 will be used. 
2: tune samples were requested but there were 72983 rows in the data. 72983 will be used. 
> 
> # Set up grid of tuning values
> tuning_grid <- grid_regular(mtry(range = c(1,ncol(training)-1)),
+                             min_n(),
+                             levels = 5)
> 
> # Set up K-fold CV
> folds <- vfold_cv(training, v = 10, repeats=1)
> 
> # run the CV
> CV_results <- wf %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(roc_auc))
boundary (singular) fit: see help('isSingular')
→ A | warning: Column(s) have zero variance so scaling cannot be used: `Transmission`. Consider using `step_zv()` to remove those columns before normalizing
There were issues with some computations   A: x1
→ B | warning: 25 columns were requested but there were 22 predictors in the data. 22 will be used.
There were issues with some computations   A: x1There were issues with some computations   A: x1   B: x1
→ C | warning: 33 columns were requested but there were 22 predictors in the data. 22 will be used.
There were issues with some computations   A: x1   B: x1There were issues with some computations   A: x1   B: x1   C: x1
There were issues with some computations   A: x1   B: x2   C: x1
There were issues with some computations   A: x1   B: x2   C: x2
There were issues with some computations   A: x1   B: x3   C: x2
